:mod:`eth1spec.rlp`
===================

.. py:module:: eth1spec.rlp

Recursive Length Prefix (RLP) Encoding
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. contents:: Table of Contents
    :backlinks: none
    :local:

Introduction
------------

Defines the serialization and deserialization format used throughout Ethereum.


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::
   :nosignatures:

   eth1spec.rlp.encode
   eth1spec.rlp.encode_bytes
   eth1spec.rlp.encode_sequence
   eth1spec.rlp.get_joined_encodings
   eth1spec.rlp.decode
   eth1spec.rlp.decode_to_bytes
   eth1spec.rlp.decode_to_sequence
   eth1spec.rlp.decode_joined_encodings
   eth1spec.rlp.decode_item_length



Attributes
~~~~~~~~~~

.. autoapisummary::

   eth1spec.rlp.RLP


Module Details
---------------

RLP
~~~

.. data:: RLP
   

   


encode
~~~~~~


Encodes `raw_data` into a sequence of bytes using RLP.


.. function:: encode(raw_data: RLP) -> eth1spec.eth_types.Bytes
   :noindexentry:




.. literalinclude:: /../src/eth1spec/rlp.py
   :language: python
   :lines: 30-55

encode_bytes
~~~~~~~~~~~~


Encodes `raw_bytes`, a sequence of bytes, using RLP.


.. function:: encode_bytes(raw_bytes: eth1spec.eth_types.Bytes) -> eth1spec.eth_types.Bytes
   :noindexentry:




.. literalinclude:: /../src/eth1spec/rlp.py
   :language: python
   :lines: 59-85

encode_sequence
~~~~~~~~~~~~~~~


Encodes a list of RLP encodable objects (`raw_sequence`) using RLP.


.. function:: encode_sequence(raw_sequence: Sequence[RLP]) -> eth1spec.eth_types.Bytes
   :noindexentry:




.. literalinclude:: /../src/eth1spec/rlp.py
   :language: python
   :lines: 89-113

get_joined_encodings
~~~~~~~~~~~~~~~~~~~~


Obtain concatenation of rlp encoding for each item in the sequence


.. function:: get_joined_encodings(raw_sequence: Sequence[RLP]) -> eth1spec.eth_types.Bytes
   :noindexentry:




.. literalinclude:: /../src/eth1spec/rlp.py
   :language: python
   :lines: 117-137

decode
~~~~~~


Decodes an integer, byte sequence, or list of RLP encodable objects


.. function:: decode(encoded_data: eth1spec.eth_types.Bytes) -> RLP
   :noindexentry:




.. literalinclude:: /../src/eth1spec/rlp.py
   :language: python
   :lines: 145-171

decode_to_bytes
~~~~~~~~~~~~~~~


Decodes a rlp encoded byte stream assuming that the decoded data


.. function:: decode_to_bytes(encoded_bytes: eth1spec.eth_types.Bytes) -> eth1spec.eth_types.Bytes
   :noindexentry:




.. literalinclude:: /../src/eth1spec/rlp.py
   :language: python
   :lines: 174-211

decode_to_sequence
~~~~~~~~~~~~~~~~~~


Decodes a rlp encoded byte stream assuming that the decoded data


.. function:: decode_to_sequence(encoded_sequence: eth1spec.eth_types.Bytes) -> List[RLP]
   :noindexentry:




.. literalinclude:: /../src/eth1spec/rlp.py
   :language: python
   :lines: 214-251

decode_joined_encodings
~~~~~~~~~~~~~~~~~~~~~~~


Decodes `joined_encodings`, which is a concatenation of RLP encoded


.. function:: decode_joined_encodings(joined_encodings: eth1spec.eth_types.Bytes) -> List[RLP]
   :noindexentry:




.. literalinclude:: /../src/eth1spec/rlp.py
   :language: python
   :lines: 254-283

decode_item_length
~~~~~~~~~~~~~~~~~~


Find the length of the rlp encoding for the first object in the


.. function:: decode_item_length(encoded_data: eth1spec.eth_types.Bytes) -> int
   :noindexentry:




.. literalinclude:: /../src/eth1spec/rlp.py
   :language: python
   :lines: 286-353
