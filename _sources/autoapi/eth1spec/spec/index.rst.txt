:mod:`eth1spec.spec`
====================

.. py:module:: eth1spec.spec

Ethereum Specification
^^^^^^^^^^^^^^^^^^^^^^

.. contents:: Table of Contents
    :backlinks: none
    :local:

Introduction
------------

Entry point for the Ethereum specification.


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   eth1spec.spec.BlockChain



Functions
~~~~~~~~~

.. autoapisummary::
   :nosignatures:

   eth1spec.spec.state_transition
   eth1spec.spec.verify_header
   eth1spec.spec.apply_body
   eth1spec.spec.process_transaction
   eth1spec.spec.validate_transaction
   eth1spec.spec.calculate_intrinsic_cost
   eth1spec.spec.recover_sender
   eth1spec.spec.signing_hash
   eth1spec.spec.print_state



Attributes
~~~~~~~~~~

.. autoapisummary::

   eth1spec.spec.BLOCK_REWARD


Module Details
---------------

BLOCK_REWARD
~~~~~~~~~~~~

.. data:: BLOCK_REWARD
   

   


BlockChain
~~~~~~~~~~


History and current state of the block chain.


.. class:: BlockChain

   .. attribute:: blocks
      :annotation: :List[eth1spec.eth_types.Block]

      

   .. attribute:: state
      :annotation: :eth1spec.eth_types.State

      



state_transition
~~~~~~~~~~~~~~~~


.. function:: state_transition(chain: BlockChain, block: eth1spec.eth_types.Block) -> None
   :noindexentry:

   Attempts to apply a block to an existing block chain.

   :param chain: History and current state.
   :param block: Block to apply to `chain`.




.. undocinclude:: /../src/eth1spec/spec.py
   :language: python
   :lines: 50-75

verify_header
~~~~~~~~~~~~~


.. function:: verify_header(header: eth1spec.eth_types.Header) -> bool
   :noindexentry:

   Verifies a block header.

   :param header: Header to check for correctness.

   :returns: **verified** -- True if the header is correct, False otherwise.
   :rtype: `bool`




.. undocinclude:: /../src/eth1spec/spec.py
   :language: python
   :lines: 78-92

apply_body
~~~~~~~~~~


.. function:: apply_body(state: eth1spec.eth_types.State, coinbase: eth1spec.eth_types.Address, block_number: eth1spec.base_types.Uint, block_gas_limit: eth1spec.base_types.Uint, block_time: eth1spec.base_types.U256, block_difficulty: eth1spec.base_types.Uint, transactions: List[eth1spec.eth_types.Transaction], ommers: List[eth1spec.eth_types.Header]) -> Tuple[eth1spec.base_types.Uint, eth1spec.eth_types.Root, eth1spec.eth_types.State]
   :noindexentry:

   Executes a block.

   :param state: Current account state.
   :param coinbase: Address of account which receives block reward and transaction fees.
   :param block_number: Position of the block within the chain.
   :param block_gas_limit: Initial amount of gas available for execution in this block.
   :param block_time: Time the block was produced, measured in seconds since the epoch.
   :param block_difficulty: Difficulty of the block.
   :param transactions: Transactions included in the block.
   :param ommers: Headers of ancestor blocks which are not direct parents (formerly
                  uncles.)

   :returns: * **gas_available** (`eth1spec.base_types.Uint`) -- Remaining gas after all transactions have been executed.
             * **root** (`eth1spec.eth_types.Root`) -- State root after all transactions have been executed.
             * **state** (`eth1spec.eth_types.State`) -- State after all transactions have been executed.




.. undocinclude:: /../src/eth1spec/spec.py
   :language: python
   :lines: 95-181

process_transaction
~~~~~~~~~~~~~~~~~~~


.. function:: process_transaction(env: eth1spec.evm.Environment, tx: eth1spec.eth_types.Transaction) -> Tuple[eth1spec.base_types.U256, List[eth1spec.eth_types.Log]]
   :noindexentry:

   Execute a transaction against the provided environment.

   :param env: Environment for the Ethereum Virtual Machine.
   :param tx: Transaction to execute.

   :returns: * **gas_left** (`eth1spec.base_types.U256`) -- Remaining gas after execution.
             * **logs** (`List[eth1spec.eth_types.Log]`) -- Logs generated during execution.




.. undocinclude:: /../src/eth1spec/spec.py
   :language: python
   :lines: 184-229

validate_transaction
~~~~~~~~~~~~~~~~~~~~


.. function:: validate_transaction(tx: eth1spec.eth_types.Transaction) -> bool
   :noindexentry:

   Verifies a transaction.

   :param tx: Transaction to validate.

   :returns: **verified** -- True if the transaction can be executed, or False otherwise.
   :rtype: `bool`




.. undocinclude:: /../src/eth1spec/spec.py
   :language: python
   :lines: 232-246

calculate_intrinsic_cost
~~~~~~~~~~~~~~~~~~~~~~~~


.. function:: calculate_intrinsic_cost(tx: eth1spec.eth_types.Transaction) -> eth1spec.base_types.Uint
   :noindexentry:

   Calculates the intrinsic cost of the transaction that is charged before
   execution is instantiated.

   :param tx: Transaction to compute the intrinsic cost of.

   :returns: **verified** -- The intrinsic cost of the transaction.
   :rtype: `eth1spec.base_types.Uint`




.. undocinclude:: /../src/eth1spec/spec.py
   :language: python
   :lines: 249-272

recover_sender
~~~~~~~~~~~~~~


.. function:: recover_sender(tx: eth1spec.eth_types.Transaction) -> eth1spec.eth_types.Address
   :noindexentry:

   Extracts the sender address from a transaction.

   :param tx: Transaction of interest.

   :returns: **sender** -- The address of the account that signed the transaction.
   :rtype: `eth1spec.eth_types.Address`




.. undocinclude:: /../src/eth1spec/spec.py
   :language: python
   :lines: 275-305

signing_hash
~~~~~~~~~~~~


.. function:: signing_hash(tx: eth1spec.eth_types.Transaction) -> eth1spec.eth_types.Hash32
   :noindexentry:

   Compute the hash of a transaction used in the signature.

   :param tx: Transaction of interest.

   :returns: **hash** -- Hash of the transaction.
   :rtype: `eth1spec.eth_types.Hash32`




.. undocinclude:: /../src/eth1spec/spec.py
   :language: python
   :lines: 308-330

print_state
~~~~~~~~~~~


.. function:: print_state(state: eth1spec.eth_types.State) -> None
   :noindexentry:

   Pretty prints the state.

   :param state: Ethereum state.




.. undocinclude:: /../src/eth1spec/spec.py
   :language: python
   :lines: 336-357
